[
    {
        "children": [], 
        "depends_on": null, 
        "help": null, 
        "name": "IDF_CMAKE", 
        "range": null, 
        "title": null, 
        "type": "bool"
    }, 
    {
        "children": [
            {
                "children": [], 
                "depends_on": null, 
                "help": "The prefix/path that is used to call the toolchain. The default setting assumes\na crosstool-ng gcc setup that is in your PATH.\n", 
                "name": "TOOLPREFIX", 
                "range": null, 
                "title": "Compiler toolchain path/prefix", 
                "type": "string"
            }, 
            {
                "children": [], 
                "depends_on": "!IDF_CMAKE", 
                "help": "The executable name/path that is used to run python. On some systems Python 2.x\nmay need to be invoked as python2.\n\n(Note: This option is used with the GNU Make build system only, not idf.py\nor CMake-based builds.)\n", 
                "name": "PYTHON", 
                "range": null, 
                "title": "Python 2 interpreter", 
                "type": "string"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": "Adds --warn-undefined-variables to MAKEFLAGS. This causes make to\nprint a warning any time an undefined variable is referenced.\n\nThis option helps find places where a variable reference is misspelled\nor otherwise missing, but it can be unwanted if you have Makefiles which\ndepend on undefined variables expanding to an empty string.\n", 
                "name": "MAKE_WARN_UNDEFINED_VARIABLES", 
                "range": null, 
                "title": "'make' warns on undefined variables", 
                "type": "bool"
            }
        ], 
        "depends_on": null, 
        "title": "SDK tool configuration", 
        "type": "menu"
    }, 
    {
        "children": [
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice LOG_BOOTLOADER_LEVEL>", 
                        "help": null, 
                        "name": "LOG_BOOTLOADER_LEVEL_NONE", 
                        "range": null, 
                        "title": "No output", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice LOG_BOOTLOADER_LEVEL>", 
                        "help": null, 
                        "name": "LOG_BOOTLOADER_LEVEL_ERROR", 
                        "range": null, 
                        "title": "Error", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice LOG_BOOTLOADER_LEVEL>", 
                        "help": null, 
                        "name": "LOG_BOOTLOADER_LEVEL_WARN", 
                        "range": null, 
                        "title": "Warning", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice LOG_BOOTLOADER_LEVEL>", 
                        "help": null, 
                        "name": "LOG_BOOTLOADER_LEVEL_INFO", 
                        "range": null, 
                        "title": "Info", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice LOG_BOOTLOADER_LEVEL>", 
                        "help": null, 
                        "name": "LOG_BOOTLOADER_LEVEL_DEBUG", 
                        "range": null, 
                        "title": "Debug", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice LOG_BOOTLOADER_LEVEL>", 
                        "help": null, 
                        "name": "LOG_BOOTLOADER_LEVEL_VERBOSE", 
                        "range": null, 
                        "title": "Verbose", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "Specify how much output to see in bootloader logs.\n", 
                "name": "LOG_BOOTLOADER_LEVEL", 
                "title": "Bootloader log verbosity", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "LOG_BOOTLOADER_LEVEL", 
                "range": null, 
                "title": null, 
                "type": "int"
            }, 
            {
                "children": [], 
                "depends_on": "FLASHMODE_QIO || FLASHMODE_QOUT", 
                "help": "This value is ignored unless flash mode is set to QIO or QOUT *and* the SPI flash pins have been\noverriden by setting the efuses SPI_PAD_CONFIG_xxx.\n\nWhen this is the case, the Efuse config only defines 3 of the 4 Quad I/O data pins. The WP pin (aka ESP32\npin \"SD_DATA_3\" or SPI flash pin \"IO2\") is not specified in Efuse. That pin number is compiled into the bootloader\ninstead.\n\nThe default value (GPIO 7) is correct for WP pin on ESP32-D2WD integrated flash.\n", 
                "name": "BOOTLOADER_SPI_WP_PIN", 
                "range": [
                    0, 
                    33
                ], 
                "title": "SPI Flash WP Pin when customising pins via efuse (read help)", 
                "type": "int"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "!ESPTOOLPY_FLASHFREQ_80M && <choice BOOTLOADER_VDDSDIO_BOOST>", 
                        "help": null, 
                        "name": "BOOTLOADER_VDDSDIO_BOOST_1_8V", 
                        "range": null, 
                        "title": "1.8V", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice BOOTLOADER_VDDSDIO_BOOST>", 
                        "help": null, 
                        "name": "BOOTLOADER_VDDSDIO_BOOST_1_9V", 
                        "range": null, 
                        "title": "1.9V", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "If this option is enabled, and VDDSDIO LDO is set to 1.8V (using EFUSE\nor MTDI bootstrapping pin), bootloader will change LDO settings to\noutput 1.9V instead. This helps prevent flash chip from browning out\nduring flash programming operations.\n\nThis option has no effect if VDDSDIO is set to 3.3V, or if the internal\nVDDSDIO regulator is disabled via efuse.\n", 
                "name": "BOOTLOADER_VDDSDIO_BOOST", 
                "title": "VDDSDIO LDO voltage", 
                "type": "choice"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "BOOTLOADER_FACTORY_RESET", 
                        "help": "The selected GPIO will be configured as an input with internal pull-up enabled.\nTo trigger a factory reset, this GPIO must be pulled low on reset.\nNote that GPIO34-39 do not have an internal pullup and an external one must be provided.\n", 
                        "name": "BOOTLOADER_NUM_PIN_FACTORY_RESET", 
                        "range": [
                            0, 
                            39
                        ], 
                        "title": "Number of the GPIO input for factory reset", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "BOOTLOADER_FACTORY_RESET", 
                        "help": "The device will boot from \"factory\" partition (or OTA slot 0 if no factory partition is present) after a factory reset.\n", 
                        "name": "BOOTLOADER_OTA_DATA_ERASE", 
                        "range": null, 
                        "title": "Clear OTA data on factory reset (select factory partition)", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "BOOTLOADER_FACTORY_RESET", 
                        "help": "Allows customers to select which data partitions will be erased while factory reset.\n\nSpecify the names of partitions as a comma-delimited with optional spaces for readability. (Like this: \"nvs, phy_init, ...\")\nMake sure that the name specified in the partition table and here are the same.\nPartitions of type \"app\" cannot be specified here.\n", 
                        "name": "BOOTLOADER_DATA_FACTORY_RESET", 
                        "range": null, 
                        "title": "Comma-separated names of partitions to clear on factory reset", 
                        "type": "string"
                    }
                ], 
                "depends_on": null, 
                "help": "Allows to reset the device to factory settings:\n- clear one or more data partitions;\n- boot from \"factory\" partition.\nThe factory reset will occur if there is a GPIO input pulled low while device starts up.\nSee settings below.\n", 
                "name": "BOOTLOADER_FACTORY_RESET", 
                "range": null, 
                "title": "GPIO triggers factory reset", 
                "type": "bool"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "BOOTLOADER_APP_TEST", 
                        "help": "The selected GPIO will be configured as an input with internal pull-up enabled.\nTo trigger a test app, this GPIO must be pulled low on reset.\nAfter the GPIO input is deactivated and the device reboots, the old application will boot.\n(factory or OTA[x]).\nNote that GPIO34-39 do not have an internal pullup and an external one must be provided.\n", 
                        "name": "BOOTLOADER_NUM_PIN_APP_TEST", 
                        "range": [
                            0, 
                            39
                        ], 
                        "title": "Number of the GPIO input to boot TEST partition", 
                        "type": "int"
                    }
                ], 
                "depends_on": null, 
                "help": "Allows to run the test app from \"TEST\" partition.\nA boot from \"test\" partition will occur if there is a GPIO input pulled low while device starts up.\nSee settings below.\n", 
                "name": "BOOTLOADER_APP_TEST", 
                "range": null, 
                "title": "GPIO triggers boot from test app partition", 
                "type": "bool"
            }, 
            {
                "children": [], 
                "depends_on": "BOOTLOADER_FACTORY_RESET || BOOTLOADER_APP_TEST", 
                "help": "The GPIO must be held low continuously for this period of time after reset\nbefore a factory reset or test partition boot (as applicable) is performed.\n", 
                "name": "BOOTLOADER_HOLD_TIME_GPIO", 
                "range": null, 
                "title": "Hold time of GPIO for reset/test mode (seconds)", 
                "type": "int"
            }
        ], 
        "depends_on": null, 
        "title": "Bootloader config", 
        "type": "menu"
    }, 
    {
        "children": [
            {
                "children": [], 
                "depends_on": "SECURE_BOOT_ENABLED || SECURE_SIGNED_ON_BOOT_NO_SECURE_BOOT", 
                "help": null, 
                "name": "SECURE_SIGNED_ON_BOOT", 
                "range": null, 
                "title": null, 
                "type": "bool"
            }, 
            {
                "children": [], 
                "depends_on": "SECURE_BOOT_ENABLED || SECURE_SIGNED_ON_UPDATE_NO_SECURE_BOOT", 
                "help": null, 
                "name": "SECURE_SIGNED_ON_UPDATE", 
                "range": null, 
                "title": null, 
                "type": "bool"
            }, 
            {
                "children": [], 
                "depends_on": "SECURE_SIGNED_ON_BOOT || SECURE_SIGNED_ON_UPDATE", 
                "help": null, 
                "name": "SECURE_SIGNED_APPS", 
                "range": null, 
                "title": null, 
                "type": "bool"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "SECURE_SIGNED_APPS_NO_SECURE_BOOT", 
                        "help": "If this option is set, the bootloader will be compiled with code to verify that an app is signed before booting it.\n\nIf hardware secure boot is enabled, this option is always enabled and cannot be disabled.\nIf hardware secure boot is not enabled, this option doesn't add significant security by itself so most users will want to leave it disabled.\n", 
                        "name": "SECURE_SIGNED_ON_BOOT_NO_SECURE_BOOT", 
                        "range": null, 
                        "title": "Bootloader verifies app signatures", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "SECURE_SIGNED_APPS_NO_SECURE_BOOT", 
                        "help": "If this option is set, any OTA updated apps will have the signature verified before being considered valid.\n\nWhen enabled, the signature is automatically checked whenever the esp_ota_ops.h APIs are used for OTA updates,\nor esp_image_format.h APIs are used to verify apps.\n\nIf hardware secure boot is enabled, this option is always enabled and cannot be disabled.\nIf hardware secure boot is not enabled, this option still adds significant security against network-based attackers by preventing spoofing of OTA updates.\n", 
                        "name": "SECURE_SIGNED_ON_UPDATE_NO_SECURE_BOOT", 
                        "range": null, 
                        "title": "Verify app signature on update", 
                        "type": "bool"
                    }
                ], 
                "depends_on": "!SECURE_BOOT_ENABLED", 
                "help": "Require apps to be signed to verify their integrity.\n\nThis option uses the same app signature scheme as hardware secure boot, but unlike hardware secure boot it does not prevent the bootloader from being physically updated. This means that the device can be secured against remote network access, but not physical access. Compared to using hardware Secure Boot this option is much simpler to implement.\n", 
                "name": "SECURE_SIGNED_APPS_NO_SECURE_BOOT", 
                "range": null, 
                "title": "Require signed app images", 
                "type": "bool"
            }, 
            {
                "children": [
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice SECURE_BOOTLOADER_MODE>", 
                                "help": "On first boot, the bootloader will generate a key which is not readable externally or by software. A digest is generated from the bootloader image itself. This digest will be verified on each subsequent boot.\n\nEnabling this option means that the bootloader cannot be changed after the first time it is booted.\n", 
                                "name": "SECURE_BOOTLOADER_ONE_TIME_FLASH", 
                                "range": null, 
                                "title": "One-time flash", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice SECURE_BOOTLOADER_MODE>", 
                                "help": "Generate a reusable secure bootloader key, derived (via SHA-256) from the secure boot signing key.\n\nThis allows the secure bootloader to be re-flashed by anyone with access to the secure boot signing key.\n\nThis option is less secure than one-time flash, because a leak of the digest key from one device allows reflashing of any device that uses it.\n", 
                                "name": "SECURE_BOOTLOADER_REFLASHABLE", 
                                "range": null, 
                                "title": "Reflashable", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": "SECURE_BOOT_ENABLED", 
                        "help": null, 
                        "name": "SECURE_BOOTLOADER_MODE", 
                        "title": "Secure bootloader mode", 
                        "type": "choice"
                    }
                ], 
                "depends_on": null, 
                "help": "Build a bootloader which enables secure boot on first boot.\n\nOnce enabled, secure boot will not boot a modified bootloader. The bootloader will only load a partition table or boot an app if the data has a verified digital signature. There are implications for reflashing updated apps once secure boot is enabled.\n\nWhen enabling secure boot, JTAG and ROM BASIC Interpreter are permanently disabled by default.\n\nRefer to https://docs.espressif.com/projects/esp-idf/en/latest/security/secure-boot.html before enabling.\n", 
                "name": "SECURE_BOOT_ENABLED", 
                "range": null, 
                "title": "Enable hardware secure boot in bootloader (READ DOCS FIRST)", 
                "type": "bool"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "SECURE_BOOT_BUILD_SIGNED_BINARIES", 
                        "help": "Path to the key file used to sign app images.\n\nKey file is an ECDSA private key (NIST256p curve) in PEM format.\n\nPath is evaluated relative to the project directory.\n\nYou can generate a new signing key by running the following command:\nespsecure.py generate_signing_key secure_boot_signing_key.pem\n\nSee docs/security/secure-boot.rst for details.\n", 
                        "name": "SECURE_BOOT_SIGNING_KEY", 
                        "range": null, 
                        "title": "Secure boot private signing key", 
                        "type": "string"
                    }
                ], 
                "depends_on": "SECURE_SIGNED_APPS", 
                "help": "Once secure boot or signed app requirement is enabled, app images are required to be signed.\n\nIf enabled (default), these binary files are signed as part of the build process. The file named in \"Secure boot private signing key\" will be used to sign the image.\n\nIf disabled, unsigned app/partition data will be built. They must be signed manually using espsecure.py (for example, on a remote signing server.)\n", 
                "name": "SECURE_BOOT_BUILD_SIGNED_BINARIES", 
                "range": null, 
                "title": "Sign binaries during build", 
                "type": "bool"
            }, 
            {
                "children": [], 
                "depends_on": "SECURE_SIGNED_APPS && !SECURE_BOOT_BUILD_SIGNED_BINARIES", 
                "help": "Path to a public key file used to verify signed images. This key is compiled into the bootloader and/or app,\nto verify app images.\n\nKey file is in raw binary format, and can be extracted from a\nPEM formatted private key using the espsecure.py\nextract_public_key command.\n\nRefer to https://docs.espressif.com/projects/esp-idf/en/latest/security/secure-boot.html before enabling.\n", 
                "name": "SECURE_BOOT_VERIFICATION_KEY", 
                "range": null, 
                "title": "Secure boot public signature verification key", 
                "type": "string"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice SECURE_BOOTLOADER_KEY_ENCODING>", 
                        "help": null, 
                        "name": "SECURE_BOOTLOADER_KEY_ENCODING_256BIT", 
                        "range": null, 
                        "title": "No encoding (256 bit key)", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice SECURE_BOOTLOADER_KEY_ENCODING>", 
                        "help": null, 
                        "name": "SECURE_BOOTLOADER_KEY_ENCODING_192BIT", 
                        "range": null, 
                        "title": "3/4 encoding (192 bit key)", 
                        "type": "bool"
                    }
                ], 
                "depends_on": "SECURE_BOOTLOADER_REFLASHABLE", 
                "help": "In reflashable secure bootloader mode, a hardware key is derived from the signing key (with SHA-256) and can be written to efuse\nwith espefuse.py.\n\nNormally this is a 256-bit key, but if 3/4 Coding Scheme is used on the device then the efuse key is truncated to 192 bits.\n\nThis configuration item doesn't change any firmware code, it only changes the size of key binary which is generated at build time.\n", 
                "name": "SECURE_BOOTLOADER_KEY_ENCODING", 
                "title": "Hardware Key Encoding", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": "SECURE_BOOT_ENABLED", 
                "help": "You can disable some of the default protections offered by secure boot, in order to enable testing or a custom combination of security features.\n\nOnly enable these options if you are very sure.\n\nRefer to https://docs.espressif.com/projects/esp-idf/en/latest/security/secure-boot.html before enabling.\n", 
                "name": "SECURE_BOOT_INSECURE", 
                "range": null, 
                "title": "Allow potentially insecure options", 
                "type": "bool"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "FLASH_ENCRYPTION_ENABLED", 
                        "help": "You can disable some of the default protections offered by flash encryption, in order to enable testing or a custom combination of security features.\n\nOnly enable these options if you are very sure.\n\nRefer to docs/security/secure-boot.rst and docs/security/flash-encryption.rst for details.\n", 
                        "name": "FLASH_ENCRYPTION_INSECURE", 
                        "range": null, 
                        "title": "Allow potentially insecure options", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "If this option is set, flash contents will be encrypted by the bootloader on first boot.\n\nNote: After first boot, the system will be permanently encrypted. Re-flashing an encrypted\nsystem is complicated and not always possible.\n\nRead https://docs.espressif.com/projects/esp-idf/en/latest/security/flash-encryption.html before enabling.\n", 
                "name": "FLASH_ENCRYPTION_ENABLED", 
                "range": null, 
                "title": "Enable flash encryption on boot (READ DOCS FIRST)", 
                "type": "bool"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "SECURE_BOOT_INSECURE || FLASH_ENCRYPTION_INSECURE", 
                        "help": "By default, the BASIC ROM Console starts on reset if no valid bootloader is\nread from the flash.\n\nWhen either flash encryption or secure boot are enabled, the default is to\ndisable this BASIC fallback mode permanently via efuse.\n\nIf this option is set, this efuse is not burned and the BASIC ROM Console may\nremain accessible.  Only set this option in testing environments.\n", 
                        "name": "SECURE_BOOT_ALLOW_ROM_BASIC", 
                        "range": null, 
                        "title": "Leave ROM BASIC Interpreter available on reset", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "SECURE_BOOT_INSECURE || FLASH_ENCRYPTION_INSECURE", 
                        "help": "If not set (default), the bootloader will permanently disable JTAG (across entire chip) on first boot when either secure boot or flash encryption is enabled.\n\nSetting this option leaves JTAG on for debugging, which negates all protections of flash encryption and some of the protections of secure boot.\n\nOnly set this option in testing environments.\n", 
                        "name": "SECURE_BOOT_ALLOW_JTAG", 
                        "range": null, 
                        "title": "Allow JTAG Debugging", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "SECURE_BOOT_INSECURE", 
                        "help": "If not set (default), app partition size must be a multiple of 64KB. App images are padded to 64KB length, and the bootloader checks any trailing bytes after the signature (before the next 64KB boundary) have not been written. This is because flash cache maps entire 64KB pages into the address space. This prevents an attacker from appending unverified data after the app image in the flash, causing it to be mapped into the address space.\n\nSetting this option allows the app partition length to be unaligned, and disables padding of the app image to this length. It is generally not recommended to set this option, unless you have a legacy partitioning scheme which doesn't support 64KB aligned partition lengths.\n", 
                        "name": "SECURE_BOOT_ALLOW_SHORT_APP_PARTITION", 
                        "range": null, 
                        "title": "Allow app partition length not 64KB aligned", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "FLASH_ENCRYPTION_INSECURE", 
                        "help": "If not set (default), the bootloader will permanently disable UART bootloader encryption access on first boot. If set, the UART bootloader will still be able to access hardware encryption.\n\nIt is recommended to only set this option in testing environments.\n", 
                        "name": "FLASH_ENCRYPTION_UART_BOOTLOADER_ALLOW_ENCRYPT", 
                        "range": null, 
                        "title": "Leave UART bootloader encryption enabled", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "FLASH_ENCRYPTION_INSECURE", 
                        "help": "If not set (default), the bootloader will permanently disable UART bootloader decryption access on first boot. If set, the UART bootloader will still be able to access hardware decryption.\n\nOnly set this option in testing environments. Setting this option allows complete bypass of flash encryption.\n", 
                        "name": "FLASH_ENCRYPTION_UART_BOOTLOADER_ALLOW_DECRYPT", 
                        "range": null, 
                        "title": "Leave UART bootloader decryption enabled", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "FLASH_ENCRYPTION_INSECURE", 
                        "help": "If not set (default), the bootloader will permanently disable UART bootloader flash cache access on first boot. If set, the UART bootloader will still be able to access the flash cache.\n\nOnly set this option in testing environments.\n", 
                        "name": "FLASH_ENCRYPTION_UART_BOOTLOADER_ALLOW_CACHE", 
                        "range": null, 
                        "title": "Leave UART bootloader flash cache enabled", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "SECURE_BOOT_INSECURE", 
                        "help": "If this option is set, all permanent secure boot changes (via Efuse) are disabled.\n\nLog output will state changes which would be applied, but they will not be.\n\nThis option is for testing purposes only - it completely disables secure boot protection.\n", 
                        "name": "SECURE_BOOT_TEST_MODE", 
                        "range": null, 
                        "title": "Secure boot test mode: don't permanently set any efuses", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "title": "Potentially insecure options", 
                "type": "menu"
            }
        ], 
        "depends_on": null, 
        "title": "Security features", 
        "type": "menu"
    }, 
    {
        "children": [
            {
                "children": [], 
                "depends_on": "!IDF_CMAKE", 
                "help": "The serial port that's connected to the ESP chip. This can be overridden by setting the ESPPORT\nenvironment variable.\n\nThis value is ignored when using the CMake-based build system or idf.py.\n", 
                "name": "ESPTOOLPY_PORT", 
                "range": null, 
                "title": "Default serial port", 
                "type": "string"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_BAUD>", 
                        "help": null, 
                        "name": "ESPTOOLPY_BAUD_115200B", 
                        "range": null, 
                        "title": "115200 baud", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_BAUD>", 
                        "help": null, 
                        "name": "ESPTOOLPY_BAUD_230400B", 
                        "range": null, 
                        "title": "230400 baud", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_BAUD>", 
                        "help": null, 
                        "name": "ESPTOOLPY_BAUD_921600B", 
                        "range": null, 
                        "title": "921600 baud", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_BAUD>", 
                        "help": null, 
                        "name": "ESPTOOLPY_BAUD_2MB", 
                        "range": null, 
                        "title": "2Mbaud", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_BAUD>", 
                        "help": null, 
                        "name": "ESPTOOLPY_BAUD_OTHER", 
                        "range": null, 
                        "title": "Other baud rate", 
                        "type": "bool"
                    }
                ], 
                "depends_on": "!IDF_CMAKE", 
                "help": "Default baud rate to use while communicating with the ESP chip. Can be overridden by\nsetting the ESPBAUD variable.\n\nThis value is ignored when using the CMake-based build system or idf.py.\n", 
                "name": "ESPTOOLPY_BAUD", 
                "title": "Default baud rate", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "ESPTOOLPY_BAUD_OTHER_VAL", 
                "range": null, 
                "title": "Other baud rate value", 
                "type": "int"
            }, 
            {
                "children": [], 
                "depends_on": "!IDF_CMAKE", 
                "help": null, 
                "name": "ESPTOOLPY_BAUD", 
                "range": null, 
                "title": null, 
                "type": "int"
            }, 
            {
                "children": [], 
                "depends_on": "!IDF_CMAKE", 
                "help": "The flasher tool can send data compressed using zlib, letting the ROM on the ESP chip\ndecompress it on the fly before flashing it. For most payloads, this should result in a\nspeed increase.\n", 
                "name": "ESPTOOLPY_COMPRESSED", 
                "range": null, 
                "title": "Use compressed upload", 
                "type": "bool"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice FLASHMODE>", 
                        "help": null, 
                        "name": "FLASHMODE_QIO", 
                        "range": null, 
                        "title": "QIO", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice FLASHMODE>", 
                        "help": null, 
                        "name": "FLASHMODE_QOUT", 
                        "range": null, 
                        "title": "QOUT", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice FLASHMODE>", 
                        "help": null, 
                        "name": "FLASHMODE_DIO", 
                        "range": null, 
                        "title": "DIO", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice FLASHMODE>", 
                        "help": null, 
                        "name": "FLASHMODE_DOUT", 
                        "range": null, 
                        "title": "DOUT", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "Mode the flash chip is flashed in, as well as the default mode for the\nbinary to run in.\n", 
                "name": "FLASHMODE", 
                "title": "Flash SPI mode", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "ESPTOOLPY_FLASHMODE", 
                "range": null, 
                "title": null, 
                "type": "string"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHFREQ>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHFREQ_80M", 
                        "range": null, 
                        "title": "80 MHz", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHFREQ>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHFREQ_40M", 
                        "range": null, 
                        "title": "40 MHz", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHFREQ>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHFREQ_26M", 
                        "range": null, 
                        "title": "26 MHz", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHFREQ>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHFREQ_20M", 
                        "range": null, 
                        "title": "20 MHz", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "The SPI flash frequency to be used.\n", 
                "name": "ESPTOOLPY_FLASHFREQ", 
                "title": "Flash SPI speed", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "ESPTOOLPY_FLASHFREQ", 
                "range": null, 
                "title": null, 
                "type": "string"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHSIZE>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHSIZE_1MB", 
                        "range": null, 
                        "title": "1 MB", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHSIZE>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHSIZE_2MB", 
                        "range": null, 
                        "title": "2 MB", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHSIZE>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHSIZE_4MB", 
                        "range": null, 
                        "title": "4 MB", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHSIZE>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHSIZE_8MB", 
                        "range": null, 
                        "title": "8 MB", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_FLASHSIZE>", 
                        "help": null, 
                        "name": "ESPTOOLPY_FLASHSIZE_16MB", 
                        "range": null, 
                        "title": "16 MB", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "SPI flash size, in megabytes\n", 
                "name": "ESPTOOLPY_FLASHSIZE", 
                "title": "Flash size", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "ESPTOOLPY_FLASHSIZE", 
                "range": null, 
                "title": null, 
                "type": "string"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": "If this option is set, 'make flash' targets will automatically detect\nthe flash size and update the bootloader image when flashing.\n", 
                "name": "ESPTOOLPY_FLASHSIZE_DETECT", 
                "range": null, 
                "title": "Detect flash size when flashing bootloader", 
                "type": "bool"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_BEFORE>", 
                        "help": null, 
                        "name": "ESPTOOLPY_BEFORE_RESET", 
                        "range": null, 
                        "title": "Reset to bootloader", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_BEFORE>", 
                        "help": null, 
                        "name": "ESPTOOLPY_BEFORE_NORESET", 
                        "range": null, 
                        "title": "No reset", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "Configure whether esptool.py should reset the ESP32 before flashing.\n\nAutomatic resetting depends on the RTS & DTR signals being\nwired from the serial port to the ESP32. Most USB development\nboards do this internally.\n", 
                "name": "ESPTOOLPY_BEFORE", 
                "title": "Before flashing", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "ESPTOOLPY_BEFORE", 
                "range": null, 
                "title": null, 
                "type": "string"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_AFTER>", 
                        "help": null, 
                        "name": "ESPTOOLPY_AFTER_RESET", 
                        "range": null, 
                        "title": "Reset after flashing", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice ESPTOOLPY_AFTER>", 
                        "help": null, 
                        "name": "ESPTOOLPY_AFTER_NORESET", 
                        "range": null, 
                        "title": "Stay in bootloader", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "Configure whether esptool.py should reset the ESP32 after flashing.\n\nAutomatic resetting depends on the RTS & DTR signals being\nwired from the serial port to the ESP32. Most USB development\nboards do this internally.\n", 
                "name": "ESPTOOLPY_AFTER", 
                "title": "After flashing", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "ESPTOOLPY_AFTER", 
                "range": null, 
                "title": null, 
                "type": "string"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice MONITOR_BAUD>", 
                        "help": null, 
                        "name": "MONITOR_BAUD_9600B", 
                        "range": null, 
                        "title": "9600 bps", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice MONITOR_BAUD>", 
                        "help": null, 
                        "name": "MONITOR_BAUD_57600B", 
                        "range": null, 
                        "title": "57600 bps", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice MONITOR_BAUD>", 
                        "help": null, 
                        "name": "MONITOR_BAUD_115200B", 
                        "range": null, 
                        "title": "115200 bps", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice MONITOR_BAUD>", 
                        "help": null, 
                        "name": "MONITOR_BAUD_230400B", 
                        "range": null, 
                        "title": "230400 bps", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice MONITOR_BAUD>", 
                        "help": null, 
                        "name": "MONITOR_BAUD_921600B", 
                        "range": null, 
                        "title": "921600 bps", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice MONITOR_BAUD>", 
                        "help": null, 
                        "name": "MONITOR_BAUD_2MB", 
                        "range": null, 
                        "title": "2 Mbps", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice MONITOR_BAUD>", 
                        "help": null, 
                        "name": "MONITOR_BAUD_OTHER", 
                        "range": null, 
                        "title": "Custom baud rate", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "Baud rate to use when running 'make monitor' to view serial output\nfrom a running chip.\n\nCan override by setting the MONITORBAUD environment variable.\n", 
                "name": "MONITOR_BAUD", 
                "title": "'make monitor' baud rate", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "MONITOR_BAUD_OTHER_VAL", 
                "range": null, 
                "title": "Custom baud rate value", 
                "type": "int"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "MONITOR_BAUD", 
                "range": null, 
                "title": null, 
                "type": "int"
            }
        ], 
        "depends_on": null, 
        "title": "Serial flasher config", 
        "type": "menu"
    }, 
    {
        "children": [
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice PARTITION_TABLE_TYPE>", 
                        "help": null, 
                        "name": "PARTITION_TABLE_SINGLE_APP", 
                        "range": null, 
                        "title": "Single factory app, no OTA", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice PARTITION_TABLE_TYPE>", 
                        "help": null, 
                        "name": "PARTITION_TABLE_TWO_OTA", 
                        "range": null, 
                        "title": "Factory app, two OTA definitions", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice PARTITION_TABLE_TYPE>", 
                        "help": null, 
                        "name": "PARTITION_TABLE_CUSTOM", 
                        "range": null, 
                        "title": "Custom partition table CSV", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "The partition table to flash to the ESP32. The partition table\ndetermines where apps, data and other resources are expected to\nbe found.\n\nThe predefined partition table CSV descriptions can be found\nin the components/partition_table directory. Otherwise it's\npossible to create a new custom partition CSV for your application.\n", 
                "name": "PARTITION_TABLE_TYPE", 
                "title": "Partition Table", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": "Name of the custom partition CSV filename. This path is evaluated\nrelative to the project root directory.\n", 
                "name": "PARTITION_TABLE_CUSTOM_FILENAME", 
                "range": null, 
                "title": "Custom partition CSV file", 
                "type": "string"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": null, 
                "name": "PARTITION_TABLE_FILENAME", 
                "range": null, 
                "title": null, 
                "type": "string"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": "The address of partition table (by default 0x8000).\nAllows you to move the partition table, it gives more space for the bootloader.\nNote that the bootloader and app will both need to be compiled with the same PARTITION_TABLE_OFFSET value.\n", 
                "name": "PARTITION_TABLE_OFFSET", 
                "range": null, 
                "title": "Offset of partition table", 
                "type": "hex"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": "Generate an MD5 checksum for the partition table for protecting the\nintegrity of the table. The generation should be turned off for legacy\nbootloaders which cannot recognize the MD5 checksum in the partition\ntable.\n", 
                "name": "PARTITION_TABLE_MD5", 
                "range": null, 
                "title": "Generate an MD5 checksum for the partition table", 
                "type": "bool"
            }
        ], 
        "depends_on": null, 
        "title": "Partition Table", 
        "type": "menu"
    }, 
    {
        "children": [
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice OPTIMIZATION_COMPILER>", 
                        "help": null, 
                        "name": "OPTIMIZATION_LEVEL_DEBUG", 
                        "range": null, 
                        "title": "Debug (-Og)", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice OPTIMIZATION_COMPILER>", 
                        "help": null, 
                        "name": "OPTIMIZATION_LEVEL_RELEASE", 
                        "range": null, 
                        "title": "Release (-Os)", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "This option sets compiler optimization level (gcc -O argument).\n\n- for \"Release\" setting, -Os flag is added to CFLAGS.\n- for \"Debug\" setting, -Og flag is added to CFLAGS.\n\n\"Release\" with -Os produces smaller & faster compiled code but it\nmay be harder to correlated code addresses to source files when debugging.\n\nTo add custom optimization settings, set CFLAGS and/or CPPFLAGS\nin project makefile, before including $(IDF_PATH)/make/project.mk. Note that\ncustom optimization levels may be unsupported.\n", 
                "name": "OPTIMIZATION_COMPILER", 
                "title": "Optimization Level", 
                "type": "choice"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice OPTIMIZATION_ASSERTION_LEVEL>", 
                        "help": "Enable assertions. Assertion content and line number will be printed on failure.\n", 
                        "name": "OPTIMIZATION_ASSERTIONS_ENABLED", 
                        "range": null, 
                        "title": "Enabled", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice OPTIMIZATION_ASSERTION_LEVEL>", 
                        "help": "Enable silent assertions. Failed assertions will abort(), user needs to\nuse the aborting address to find the line number with the failed assertion.\n", 
                        "name": "OPTIMIZATION_ASSERTIONS_SILENT", 
                        "range": null, 
                        "title": "Silent (saves code size)", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice OPTIMIZATION_ASSERTION_LEVEL>", 
                        "help": "If assertions are disabled, -DNDEBUG is added to CPPFLAGS.\n", 
                        "name": "OPTIMIZATION_ASSERTIONS_DISABLED", 
                        "range": null, 
                        "title": "Disabled (sets -DNDEBUG)", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "Assertions can be:\n\n- Enabled. Failure will print verbose assertion details. This is the default.\n\n- Set to \"silent\" to save code size (failed assertions will abort() but user\n  needs to use the aborting address to find the line number with the failed assertion.)\n\n- Disabled entirely (not recommended for most configurations.) -DNDEBUG is added\n  to CPPFLAGS in this case.\n", 
                "name": "OPTIMIZATION_ASSERTION_LEVEL", 
                "title": "Assertion level", 
                "type": "choice"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "CXX_EXCEPTIONS", 
                        "help": "Size (in bytes) of the emergency memory pool for C++ exceptions. This pool will be used to allocate\nmemory for thrown exceptions when there is not enough memory on the heap.\n", 
                        "name": "CXX_EXCEPTIONS_EMG_POOL_SIZE", 
                        "range": null, 
                        "title": "Emergency Pool Size", 
                        "type": "int"
                    }
                ], 
                "depends_on": null, 
                "help": "Enabling this option compiles all IDF C++ files with exception support enabled.\n\nDisabling this option disables C++ exception support in all compiled files, and any libstdc++ code which throws\nan exception will abort instead.\n\nEnabling this option currently adds an additional ~500 bytes of heap overhead\nwhen an exception is thrown in user code for the first time.\n", 
                "is_menuconfig": true, 
                "name": "CXX_EXCEPTIONS", 
                "range": null, 
                "title": "Enable C++ exceptions", 
                "type": "menu"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": "<choice STACK_CHECK_MODE>", 
                        "help": null, 
                        "name": "STACK_CHECK_NONE", 
                        "range": null, 
                        "title": "None", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice STACK_CHECK_MODE>", 
                        "help": null, 
                        "name": "STACK_CHECK_NORM", 
                        "range": null, 
                        "title": "Normal", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice STACK_CHECK_MODE>", 
                        "help": null, 
                        "name": "STACK_CHECK_STRONG", 
                        "range": null, 
                        "title": "Strong", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "<choice STACK_CHECK_MODE>", 
                        "help": null, 
                        "name": "STACK_CHECK_ALL", 
                        "range": null, 
                        "title": "Overall", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "help": "Stack smashing protection mode. Emit extra code to check for buffer overflows, such as stack\nsmashing attacks. This is done by adding a guard variable to functions with vulnerable objects.\nThe guards are initialized when a function is entered and then checked when the function exits.\nIf a guard check fails, program is halted. Protection has the following modes:\n\n- In NORMAL mode (GCC flag: -fstack-protector) only functions that call alloca,\n  and functions with buffers larger than 8 bytes are protected.\n\n- STRONG mode (GCC flag: -fstack-protector-strong) is like NORMAL, but includes\n  additional functions to be protected -- those that have local array definitions,\n  or have references to local frame addresses.\n\n- In OVERALL mode (GCC flag: -fstack-protector-all) all functions are protected.\n\nModes have the following impact on code performance and coverage:\n\n- performance: NORMAL > STRONG > OVERALL\n\n- coverage: NORMAL < STRONG < OVERALL\n", 
                "name": "STACK_CHECK_MODE", 
                "title": "Stack smashing protection mode", 
                "type": "choice"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": "Stack smashing protection.\n", 
                "name": "STACK_CHECK", 
                "range": null, 
                "title": null, 
                "type": "bool"
            }, 
            {
                "children": [], 
                "depends_on": null, 
                "help": "Adds -Wwrite-strings flag for the C/C++ compilers.\n\nFor C, this gives string constants the type ``const char[]`` so that\ncopying the address of one into a non-const ``char *`` pointer\nproduces a warning. This warning helps to find at compile time code\nthat tries to write into a string constant.\n\nFor C++, this warns about the deprecated conversion from string\nliterals to ``char *``.\n", 
                "name": "WARN_WRITE_STRINGS", 
                "range": null, 
                "title": "Enable -Wwrite-strings warning flag", 
                "type": "bool"
            }
        ], 
        "depends_on": null, 
        "title": "Compiler options", 
        "type": "menu"
    }, 
    {
        "children": [
            {
                "children": [
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_DEFAULT_CPU_FREQ_MHZ>", 
                                "help": null, 
                                "name": "ESP32_DEFAULT_CPU_FREQ_80", 
                                "range": null, 
                                "title": "80 MHz", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_DEFAULT_CPU_FREQ_MHZ>", 
                                "help": null, 
                                "name": "ESP32_DEFAULT_CPU_FREQ_160", 
                                "range": null, 
                                "title": "160 MHz", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_DEFAULT_CPU_FREQ_MHZ>", 
                                "help": null, 
                                "name": "ESP32_DEFAULT_CPU_FREQ_240", 
                                "range": null, 
                                "title": "240 MHz", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "CPU frequency to be set on application startup.\n", 
                        "name": "ESP32_DEFAULT_CPU_FREQ_MHZ", 
                        "title": "CPU frequency", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "ESP32_DEFAULT_CPU_FREQ_MHZ", 
                        "range": null, 
                        "title": null, 
                        "type": "int"
                    }, 
                    {
                        "children": [
                            {
                                "children": [
                                    {
                                        "children": [
                                            {
                                                "children": [], 
                                                "depends_on": "SPIRAM_BOOT_INIT && SPIRAM_SUPPORT", 
                                                "help": "Normally, if psram initialization is enabled during compile time but not found at runtime, it\nis seen as an error making the ESP32 panic. If this is enabled, the ESP32 will keep on\nrunning but will not add the (non-existing) RAM to any allocator.\n", 
                                                "name": "SPIRAM_IGNORE_NOTFOUND", 
                                                "range": null, 
                                                "title": "Ignore PSRAM when not found", 
                                                "type": "bool"
                                            }
                                        ], 
                                        "depends_on": "SPIRAM_SUPPORT", 
                                        "help": "If this is enabled, the SPI RAM will be enabled during initial boot. Unless you\nhave specific requirements, you'll want to leave this enabled so memory allocated\nduring boot-up can also be placed in SPI RAM.\n", 
                                        "name": "SPIRAM_BOOT_INIT", 
                                        "range": null, 
                                        "title": "Initialize SPI RAM when booting the ESP32", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [
                                            {
                                                "children": [], 
                                                "depends_on": "<choice SPIRAM_USE>", 
                                                "help": null, 
                                                "name": "SPIRAM_USE_MEMMAP", 
                                                "range": null, 
                                                "title": "Integrate RAM into ESP32 memory map", 
                                                "type": "bool"
                                            }, 
                                            {
                                                "children": [], 
                                                "depends_on": "<choice SPIRAM_USE>", 
                                                "help": null, 
                                                "name": "SPIRAM_USE_CAPS_ALLOC", 
                                                "range": null, 
                                                "title": "Make RAM allocatable using heap_caps_malloc(..., MALLOC_CAP_SPIRAM)", 
                                                "type": "bool"
                                            }, 
                                            {
                                                "children": [], 
                                                "depends_on": "<choice SPIRAM_USE>", 
                                                "help": null, 
                                                "name": "SPIRAM_USE_MALLOC", 
                                                "range": null, 
                                                "title": "Make RAM allocatable using malloc() as well", 
                                                "type": "bool"
                                            }
                                        ], 
                                        "depends_on": "SPIRAM_SUPPORT", 
                                        "help": "The SPI RAM can be accessed in multiple methods: by just having it available as an unmanaged\nmemory region in the ESP32 memory map, by integrating it in the ESP32s heap as 'special' memory\nneeding heap_caps_malloc to allocate, or by fully integrating it making malloc() also able to\nreturn SPI RAM pointers.\n", 
                                        "name": "SPIRAM_USE", 
                                        "title": "SPI RAM access method", 
                                        "type": "choice"
                                    }, 
                                    {
                                        "children": [
                                            {
                                                "children": [], 
                                                "depends_on": "<choice SPIRAM_TYPE>", 
                                                "help": null, 
                                                "name": "SPIRAM_TYPE_ESPPSRAM32", 
                                                "range": null, 
                                                "title": "ESP-PSRAM32 or IS25WP032", 
                                                "type": "bool"
                                            }
                                        ], 
                                        "depends_on": "SPIRAM_SUPPORT", 
                                        "help": null, 
                                        "name": "SPIRAM_TYPE", 
                                        "title": "Type of SPI RAM chip in use", 
                                        "type": "choice"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "SPIRAM_SUPPORT", 
                                        "help": null, 
                                        "name": "SPIRAM_SIZE", 
                                        "range": null, 
                                        "title": null, 
                                        "type": "int"
                                    }, 
                                    {
                                        "children": [
                                            {
                                                "children": [], 
                                                "depends_on": "<choice SPIRAM_SPEED>", 
                                                "help": null, 
                                                "name": "SPIRAM_SPEED_40M", 
                                                "range": null, 
                                                "title": "40MHz clock speed", 
                                                "type": "bool"
                                            }, 
                                            {
                                                "children": [], 
                                                "depends_on": "ESPTOOLPY_FLASHFREQ_80M && <choice SPIRAM_SPEED>", 
                                                "help": null, 
                                                "name": "SPIRAM_SPEED_80M", 
                                                "range": null, 
                                                "title": "80MHz clock speed", 
                                                "type": "bool"
                                            }
                                        ], 
                                        "depends_on": "SPIRAM_SUPPORT", 
                                        "help": "Select the speed for the SPI RAM chip.\nIf SPI RAM is enabled, we only support three combinations of SPI speed mode we supported now:\n\n1. Flash SPI running at 40Mhz and RAM SPI running at 40Mhz\n2. Flash SPI running at 80Mhz and RAM SPI running at 40Mhz\n3. Flash SPI running at 80Mhz and RAM SPI running at 80Mhz\n\n   Note: If the third mode(80Mhz+80Mhz) is enabled, the VSPI port will be occupied by the system.\n         Application code should never touch VSPI hardware in this case. The option to select\n         80MHz will only be visible if the flash SPI speed is also 80MHz. (ESPTOOLPY_FLASHFREQ_80M is true)\n", 
                                        "name": "SPIRAM_SPEED", 
                                        "title": "Set RAM clock speed", 
                                        "type": "choice"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "SPIRAM_BOOT_INIT && SPIRAM_SUPPORT", 
                                        "help": "Runs a rudimentary memory test on initialization. Aborts when memory test fails. Disable this for\nslightly faster startop.\n", 
                                        "name": "SPIRAM_MEMTEST", 
                                        "range": null, 
                                        "title": "Run memory test on SPI RAM initialization", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "(SPIRAM_USE_MEMMAP || SPIRAM_USE_CAPS_ALLOC || SPIRAM_USE_MALLOC) && SPIRAM_SUPPORT", 
                                        "help": "Revision 1 of the ESP32 has a bug that can cause a write to PSRAM not to take place in some situations\nwhen the cache line needs to be fetched from external RAM and an interrupt occurs. This enables a\nfix in the compiler that makes sure the specific code that is vulnerable to this will not be emitted.\n\nThis will also not use any bits of newlib that are located in ROM, opting for a version that is compiled\nwith the workaround and located in flash instead.\n", 
                                        "name": "SPIRAM_CACHE_WORKAROUND", 
                                        "range": null, 
                                        "title": "Enable workaround for bug in SPI RAM cache for Rev1 ESP32s", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "SPIRAM_USE_MALLOC && SPIRAM_SUPPORT", 
                                        "help": "If malloc() is capable of also allocating SPI-connected ram, its allocation strategy will prefer to allocate chunks less\nthan this size in internal memory, while allocations larger than this will be done from external RAM.\nIf allocation from the preferred region fails, an attempt is made to allocate from the non-preferred\nregion instead, so malloc() will not suddenly fail when either internal or external memory is full.\n", 
                                        "name": "SPIRAM_MALLOC_ALWAYSINTERNAL", 
                                        "range": [
                                            0, 
                                            131072
                                        ], 
                                        "title": "Maximum malloc() size, in bytes, to always put in internal memory", 
                                        "type": "int"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "(SPIRAM_USE_CAPS_ALLOC || SPIRAM_USE_MALLOC) && SPIRAM_SUPPORT", 
                                        "help": "Try to allocate memories of WiFi and LWIP in SPIRAM firstly. If failed, try to allocate internal memory then.\n", 
                                        "name": "WIFI_LWIP_ALLOCATION_FROM_SPIRAM_FIRST", 
                                        "range": null, 
                                        "title": "Try to allocate memories of WiFi and LWIP in SPIRAM firstly. If failed, allocate internal memory", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "SPIRAM_USE_MALLOC && SPIRAM_SUPPORT", 
                                        "help": "Because the external/internal RAM allocation strategy is not always perfect, it sometimes may happen\nthat the internal memory is entirely filled up. This causes allocations that are specifically done in\ninternal memory, for example the stack for new tasks or memory to service DMA or have memory that's\nalso available when SPI cache is down, to fail. This option reserves a pool specifically for requests\nlike that; the memory in this pool is not given out when a normal malloc() is called.\n\nSet this to 0 to disable this feature.\n\nNote that because FreeRTOS stacks are forced to internal memory, they will also use this memory pool;\nbe sure to keep this in mind when adjusting this value.\n", 
                                        "name": "SPIRAM_MALLOC_RESERVE_INTERNAL", 
                                        "range": [
                                            0, 
                                            131072
                                        ], 
                                        "title": "Reserve this amount of bytes for data that specifically needs to be in DMA or internal memory", 
                                        "type": "int"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "SPIRAM_USE_MALLOC && SPIRAM_SUPPORT", 
                                        "help": "Because some bits of the ESP32 code environment cannot be recompiled with the cache workaround, normally\ntasks cannot be safely run with their stack residing in external memory; for this reason xTaskCreate and\nfriends always allocate stack in internal memory and xTaskCreateStatic will check if the memory passed\nto it is in internal memory. If you have a task that needs a large amount of stack and does not call on\nROM code in any way (no direct calls, but also no Bluetooth/WiFi), you can try to disable this and use\nxTaskCreateStatic to create the tasks stack in external memory.\n", 
                                        "name": "SPIRAM_ALLOW_STACK_EXTERNAL_MEMORY", 
                                        "range": null, 
                                        "title": "Allow external memory as an argument to xTaskCreateStatic", 
                                        "type": "bool"
                                    }
                                ], 
                                "depends_on": "SPIRAM_SUPPORT", 
                                "title": "SPI RAM config", 
                                "type": "menu"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "This enables support for an external SPI RAM chip, connected in parallel with the\nmain SPI flash chip.\n", 
                        "name": "SPIRAM_SUPPORT", 
                        "range": null, 
                        "title": "Support for external, SPI-connected RAM", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "MEMMAP_TRACEMEM", 
                        "range": null, 
                        "title": null, 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "MEMMAP_TRACEMEM_TWOBANKS", 
                        "range": null, 
                        "title": null, 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "ESP32_TRAX && !FREERTOS_UNICORE", 
                                "help": "The ESP32 contains a feature which allows you to trace the execution path the processor\nhas taken through the program. This is stored in a chunk of 32K (16K for single-processor)\nof memory that can't be used for general purposes anymore. Disable this if you do not know\nwhat this is.\n", 
                                "name": "ESP32_TRAX_TWOBANKS", 
                                "range": null, 
                                "title": "Reserve memory for tracing both pro as well as app cpu execution", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "The ESP32 contains a feature which allows you to trace the execution path the processor\nhas taken through the program. This is stored in a chunk of 32K (16K for single-processor)\nof memory that can't be used for general purposes anymore. Disable this if you do not know\nwhat this is.\n", 
                        "name": "ESP32_TRAX", 
                        "range": null, 
                        "title": "Use TRAX tracing feature", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "TRACEMEM_RESERVE_DRAM", 
                        "range": null, 
                        "title": null, 
                        "type": "hex"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_COREDUMP_TO_FLASH_OR_UART>", 
                                "help": null, 
                                "name": "ESP32_ENABLE_COREDUMP_TO_FLASH", 
                                "range": null, 
                                "title": "Flash", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_COREDUMP_TO_FLASH_OR_UART>", 
                                "help": null, 
                                "name": "ESP32_ENABLE_COREDUMP_TO_UART", 
                                "range": null, 
                                "title": "UART", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_COREDUMP_TO_FLASH_OR_UART>", 
                                "help": null, 
                                "name": "ESP32_ENABLE_COREDUMP_TO_NONE", 
                                "range": null, 
                                "title": "None", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Select place to store core dump: flash, uart or none (to disable core dumps generation).\n\nIf core dump is configured to be stored in flash and custom partition table is used add\ncorresponding entry to your CSV. For examples, please see predefined partition table CSV descriptions\nin the components/partition_table directory.\n", 
                        "name": "ESP32_COREDUMP_TO_FLASH_OR_UART", 
                        "title": "Core dump destination", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Enables/disable core dump module.\n", 
                        "name": "ESP32_ENABLE_COREDUMP", 
                        "range": null, 
                        "title": null, 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "ESP32_ENABLE_COREDUMP_TO_UART", 
                        "help": "Config delay (in ms) before printing core dump to UART.\nDelay can be interrupted by pressing Enter key.\n", 
                        "name": "ESP32_CORE_DUMP_UART_DELAY", 
                        "range": null, 
                        "title": "Core dump print to UART delay", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "ESP32_ENABLE_COREDUMP", 
                        "help": "Config core dump module logging level (0-5).\n", 
                        "name": "ESP32_CORE_DUMP_LOG_LEVEL", 
                        "range": null, 
                        "title": "Core dump module logging level", 
                        "type": "int"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice NUMBER_OF_UNIVERSAL_MAC_ADDRESS>", 
                                "help": null, 
                                "name": "TWO_UNIVERSAL_MAC_ADDRESS", 
                                "range": null, 
                                "title": "Two", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice NUMBER_OF_UNIVERSAL_MAC_ADDRESS>", 
                                "help": null, 
                                "name": "FOUR_UNIVERSAL_MAC_ADDRESS", 
                                "range": null, 
                                "title": "Four", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Configure the number of universally administered (by IEEE) MAC addresses.\nDuring initialisation, MAC addresses for each network interface are generated or derived from a\nsingle base MAC address.\nIf the number of universal MAC addresses is four, all four interfaces (WiFi station, WiFi softap,\nBluetooth and Ethernet) receive a universally administered MAC address. These are generated\nsequentially by adding 0, 1, 2 and 3 (respectively) to the final octet of the base MAC address.\nIf the number of universal MAC addresses is two, only two interfaces (WiFi station and Bluetooth)\nreceive a universally administered MAC address. These are generated sequentially by adding 0\nand 1 (respectively) to the base MAC address. The remaining two interfaces (WiFi softap and Ethernet)\nreceive local MAC addresses. These are derived from the universal WiFi station and Bluetooth MAC\naddresses, respectively.\nWhen using the default (Espressif-assigned) base MAC address, either setting can be used. When using\na custom universal MAC address range, the correct setting will depend on the allocation of MAC\naddresses in this range (either 2 or 4 per device.)\n", 
                        "name": "NUMBER_OF_UNIVERSAL_MAC_ADDRESS", 
                        "title": "Number of universally administered (by IEEE) MAC address", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "NUMBER_OF_UNIVERSAL_MAC_ADDRESS", 
                        "range": null, 
                        "title": null, 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Config system event queue size in different application.\n", 
                        "name": "SYSTEM_EVENT_QUEUE_SIZE", 
                        "range": null, 
                        "title": "System event queue size", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Config system event task stack size in different application.\n", 
                        "name": "SYSTEM_EVENT_TASK_STACK_SIZE", 
                        "range": null, 
                        "title": "Event loop task stack size", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Configure the \"main task\" stack size. This is the stack of the task\nwhich calls app_main(). If app_main() returns then this task is deleted\nand its stack memory is freed.\n", 
                        "name": "MAIN_TASK_STACK_SIZE", 
                        "range": null, 
                        "title": "Main task stack size", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Configure the IPC tasks stack size. One IPC task runs on each core\n(in dual core mode), and allows for cross-core function calls.\n\nSee IPC documentation for more details.\n\nThe default stack size should be enough for most common use cases.\nIt can be shrunk if you are sure that you do not use any custom\nIPC functionality.\n", 
                        "name": "IPC_TASK_STACK_SIZE", 
                        "range": [
                            2048, 
                            65536
                        ], 
                        "title": "Inter-Processor Call (IPC) task stack size", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Configure the stack size of esp_timer/ets_timer task. This task is used\nto dispatch callbacks of timers created using ets_timer and esp_timer\nAPIs. If you are seing stack overflow errors in timer task, increase\nthis value.\n\nNote that this is not the same as FreeRTOS timer task. To configure\nFreeRTOS timer task size, see \"FreeRTOS timer task stack size\" option\nin \"FreeRTOS\" menu.\n", 
                        "name": "TIMER_TASK_STACK_SIZE", 
                        "range": [
                            2048, 
                            65536
                        ], 
                        "title": "High-resolution timer task stack size", 
                        "type": "int"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice NEWLIB_STDOUT_LINE_ENDING>", 
                                "help": null, 
                                "name": "NEWLIB_STDOUT_LINE_ENDING_CRLF", 
                                "range": null, 
                                "title": "CRLF", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice NEWLIB_STDOUT_LINE_ENDING>", 
                                "help": null, 
                                "name": "NEWLIB_STDOUT_LINE_ENDING_LF", 
                                "range": null, 
                                "title": "LF", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice NEWLIB_STDOUT_LINE_ENDING>", 
                                "help": null, 
                                "name": "NEWLIB_STDOUT_LINE_ENDING_CR", 
                                "range": null, 
                                "title": "CR", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "This option allows configuring the desired line endings sent to UART\nwhen a newline ('\\n', LF) appears on stdout.\nThree options are possible:\n\nCRLF: whenever LF is encountered, prepend it with CR\n\nLF: no modification is applied, stdout is sent as is\n\nCR: each occurence of LF is replaced with CR\n\nThis option doesn't affect behavior of the UART driver (drivers/uart.h).\n", 
                        "name": "NEWLIB_STDOUT_LINE_ENDING", 
                        "title": "Line ending for UART output", 
                        "type": "choice"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice NEWLIB_STDIN_LINE_ENDING>", 
                                "help": null, 
                                "name": "NEWLIB_STDIN_LINE_ENDING_CRLF", 
                                "range": null, 
                                "title": "CRLF", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice NEWLIB_STDIN_LINE_ENDING>", 
                                "help": null, 
                                "name": "NEWLIB_STDIN_LINE_ENDING_LF", 
                                "range": null, 
                                "title": "LF", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice NEWLIB_STDIN_LINE_ENDING>", 
                                "help": null, 
                                "name": "NEWLIB_STDIN_LINE_ENDING_CR", 
                                "range": null, 
                                "title": "CR", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "This option allows configuring which input sequence on UART produces\na newline ('\\n', LF) on stdin.\nThree options are possible:\n\nCRLF: CRLF is converted to LF\n\nLF: no modification is applied, input is sent to stdin as is\n\nCR: each occurence of CR is replaced with LF\n\nThis option doesn't affect behavior of the UART driver (drivers/uart.h).\n", 
                        "name": "NEWLIB_STDIN_LINE_ENDING", 
                        "title": "Line ending for UART input", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "ESP32 ROM contains parts of newlib C library, including printf/scanf family\nof functions. These functions have been compiled with so-called \"nano\"\nformatting option. This option doesn't support 64-bit integer formats and C99\nfeatures, such as positional arguments.\n\nFor more details about \"nano\" formatting option, please see newlib readme file,\nsearch for '--enable-newlib-nano-formatted-io':\nhttps://sourceware.org/newlib/README\n\nIf this option is enabled, build system will use functions available in\nROM, reducing the application binary size. Functions available in ROM run\nfaster than functions which run from flash. Functions available in ROM can\nalso run when flash instruction cache is disabled.\n\nIf you need 64-bit integer formatting support or C99 features, keep this\noption disabled.\n", 
                        "name": "NEWLIB_NANO_FORMAT", 
                        "range": null, 
                        "title": "Enable 'nano' formatting options for printf/scanf family", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice CONSOLE_UART>", 
                                "help": null, 
                                "name": "CONSOLE_UART_DEFAULT", 
                                "range": null, 
                                "title": "Default: UART0, TX=GPIO1, RX=GPIO3", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice CONSOLE_UART>", 
                                "help": null, 
                                "name": "CONSOLE_UART_CUSTOM", 
                                "range": null, 
                                "title": "Custom", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice CONSOLE_UART>", 
                                "help": null, 
                                "name": "CONSOLE_UART_NONE", 
                                "range": null, 
                                "title": "None", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Select whether to use UART for console output (through stdout and stderr).\n\n- Default is to use UART0 on pins GPIO1(TX) and GPIO3(RX).\n- If \"Custom\" is selected, UART0 or UART1 can be chosen,\n  and any pins can be selected.\n- If \"None\" is selected, there will be no console output on any UART, except\n  for initial output from ROM bootloader. This output can be further suppressed by\n  bootstrapping GPIO13 pin to low logic level.\n", 
                        "name": "CONSOLE_UART", 
                        "title": "UART for console output", 
                        "type": "choice"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice CONSOLE_UART_NUM>", 
                                "help": null, 
                                "name": "CONSOLE_UART_CUSTOM_NUM_0", 
                                "range": null, 
                                "title": "UART0", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice CONSOLE_UART_NUM>", 
                                "help": null, 
                                "name": "CONSOLE_UART_CUSTOM_NUM_1", 
                                "range": null, 
                                "title": "UART1", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": "CONSOLE_UART_CUSTOM", 
                        "help": "Due of a ROM bug, UART2 is not supported for console output\nvia ets_printf.\n", 
                        "name": "CONSOLE_UART_NUM", 
                        "title": "UART peripheral to use for console output (0-1)", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "CONSOLE_UART_NUM", 
                        "range": null, 
                        "title": null, 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "CONSOLE_UART_CUSTOM", 
                        "help": null, 
                        "name": "CONSOLE_UART_TX_GPIO", 
                        "range": [
                            0, 
                            33
                        ], 
                        "title": "UART TX on GPIO#", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "CONSOLE_UART_CUSTOM", 
                        "help": null, 
                        "name": "CONSOLE_UART_RX_GPIO", 
                        "range": [
                            0, 
                            39
                        ], 
                        "title": "UART RX on GPIO#", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "!CONSOLE_UART_NONE", 
                        "help": null, 
                        "name": "CONSOLE_UART_BAUDRATE", 
                        "range": [
                            1200, 
                            4000000
                        ], 
                        "title": "UART console baud rate", 
                        "type": "int"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": null, 
                                "help": "Bytes of memory to reserve for ULP coprocessor firmware & data.\n\nData is reserved at the beginning of RTC slow memory.\n", 
                                "name": "ULP_COPROC_RESERVE_MEM", 
                                "range": [
                                    0, 
                                    0
                                ], 
                                "title": "RTC slow memory reserved for coprocessor", 
                                "type": "int"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Set to 'y' if you plan to load a firmware for the coprocessor.\n\nIf this option is enabled, further coprocessor configuration will appear in the Components menu.\n", 
                        "name": "ULP_COPROC_ENABLED", 
                        "range": null, 
                        "title": "Enable Ultra Low Power (ULP) Coprocessor", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_PANIC>", 
                                "help": "Outputs the relevant registers over the serial port and halt the\nprocessor. Needs a manual reset to restart.\n", 
                                "name": "ESP32_PANIC_PRINT_HALT", 
                                "range": null, 
                                "title": "Print registers and halt", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_PANIC>", 
                                "help": "Outputs the relevant registers over the serial port and immediately\nreset the processor.\n", 
                                "name": "ESP32_PANIC_PRINT_REBOOT", 
                                "range": null, 
                                "title": "Print registers and reboot", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_PANIC>", 
                                "help": "Just resets the processor without outputting anything\n", 
                                "name": "ESP32_PANIC_SILENT_REBOOT", 
                                "range": null, 
                                "title": "Silent reboot", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_PANIC>", 
                                "help": "Invoke gdbstub on the serial port, allowing for gdb to attach to it to do a postmortem\nof the crash.\n", 
                                "name": "ESP32_PANIC_GDBSTUB", 
                                "range": null, 
                                "title": "Invoke GDBStub", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "If FreeRTOS detects unexpected behaviour or an unhandled exception, the panic handler is\ninvoked. Configure the panic handlers action here.\n", 
                        "name": "ESP32_PANIC", 
                        "title": "Panic handler behaviour", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "The FreeRTOS panic and unhandled exception handers can detect a JTAG OCD debugger and\ninstead of panicking, have the debugger stop on the offending instruction.\n", 
                        "name": "ESP32_DEBUG_OCDAWARE", 
                        "range": null, 
                        "title": "Make exception and panic handlers JTAG/OCD aware", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "!ESP32_TRAX", 
                        "help": "Debug stubs are used by OpenOCD to execute pre-compiled onboard code which does some useful debugging,\ne.g. GCOV data dump.\n", 
                        "name": "ESP32_DEBUG_STUBS_ENABLE", 
                        "range": null, 
                        "title": "OpenOCD debug stubs", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "INT_WDT", 
                                "help": "The timeout of the watchdog, in miliseconds. Make this higher than the FreeRTOS tick rate.\n", 
                                "name": "INT_WDT_TIMEOUT_MS", 
                                "range": [
                                    10, 
                                    10000
                                ], 
                                "title": "Interrupt watchdog timeout (ms)", 
                                "type": "int"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "INT_WDT && !FREERTOS_UNICORE", 
                                "help": "Also detect if interrupts on CPU 1 are disabled for too long.\n", 
                                "name": "INT_WDT_CHECK_CPU1", 
                                "range": null, 
                                "title": "Also watch CPU1 tick interrupt", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "This watchdog timer can detect if the FreeRTOS tick interrupt has not been called for a certain time,\neither because a task turned off interrupts and did not turn them on for a long time, or because an\ninterrupt handler did not return. It will try to invoke the panic handler first and failing that\nreset the SoC.\n", 
                        "name": "INT_WDT", 
                        "range": null, 
                        "title": "Interrupt watchdog", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "TASK_WDT", 
                                "help": "If this option is enabled, the Task Watchdog Timer will be configured to\ntrigger the panic handler when it times out. This can also be configured\nat run time (see Task Watchdog Timer API Reference)\n", 
                                "name": "TASK_WDT_PANIC", 
                                "range": null, 
                                "title": "Invoke panic handler on Task Watchdog timeout", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "TASK_WDT", 
                                "help": "Timeout period configuration for the Task Watchdog Timer in seconds.\nThis is also configurable at run time (see Task Watchdog Timer API Reference)\n", 
                                "name": "TASK_WDT_TIMEOUT_S", 
                                "range": [
                                    1, 
                                    60
                                ], 
                                "title": "Task Watchdog timeout period (seconds)", 
                                "type": "int"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "TASK_WDT", 
                                "help": "If this option is enabled, the Task Watchdog Timer will watch the CPU0\nIdle Task. Having the Task Watchdog watch the Idle Task allows for detection\nof CPU starvation as the Idle Task not being called is usually a symptom of\nCPU starvation. Starvation of the Idle Task is detrimental as FreeRTOS household\ntasks depend on the Idle Task getting some runtime every now and then.\n", 
                                "name": "TASK_WDT_CHECK_IDLE_TASK_CPU0", 
                                "range": null, 
                                "title": "Watch CPU0 Idle Task", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "TASK_WDT && !FREERTOS_UNICORE", 
                                "help": "If this option is enabled, the Task Wtachdog Timer will wach the CPU1\nIdle Task.\n", 
                                "name": "TASK_WDT_CHECK_IDLE_TASK_CPU1", 
                                "range": null, 
                                "title": "Watch CPU1 Idle Task", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "The Task Watchdog Timer can be used to make sure individual tasks are still\nrunning. Enabling this option will cause the Task Watchdog Timer to be\ninitialized automatically at startup. The Task Watchdog timer can be\ninitialized after startup as well (see Task Watchdog Timer API Reference)\n", 
                        "name": "TASK_WDT", 
                        "range": null, 
                        "title": "Initialize Task Watchdog Timer on startup", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [
                                    {
                                        "children": [], 
                                        "depends_on": "<choice BROWNOUT_DET_LVL_SEL>", 
                                        "help": null, 
                                        "name": "BROWNOUT_DET_LVL_SEL_0", 
                                        "range": null, 
                                        "title": "2.43V +/- 0.05", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice BROWNOUT_DET_LVL_SEL>", 
                                        "help": null, 
                                        "name": "BROWNOUT_DET_LVL_SEL_1", 
                                        "range": null, 
                                        "title": "2.48V +/- 0.05", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice BROWNOUT_DET_LVL_SEL>", 
                                        "help": null, 
                                        "name": "BROWNOUT_DET_LVL_SEL_2", 
                                        "range": null, 
                                        "title": "2.58V +/- 0.05", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice BROWNOUT_DET_LVL_SEL>", 
                                        "help": null, 
                                        "name": "BROWNOUT_DET_LVL_SEL_3", 
                                        "range": null, 
                                        "title": "2.62V +/- 0.05", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice BROWNOUT_DET_LVL_SEL>", 
                                        "help": null, 
                                        "name": "BROWNOUT_DET_LVL_SEL_4", 
                                        "range": null, 
                                        "title": "2.67V +/- 0.05", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice BROWNOUT_DET_LVL_SEL>", 
                                        "help": null, 
                                        "name": "BROWNOUT_DET_LVL_SEL_5", 
                                        "range": null, 
                                        "title": "2.70V +/- 0.05", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice BROWNOUT_DET_LVL_SEL>", 
                                        "help": null, 
                                        "name": "BROWNOUT_DET_LVL_SEL_6", 
                                        "range": null, 
                                        "title": "2.77V +/- 0.05", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice BROWNOUT_DET_LVL_SEL>", 
                                        "help": null, 
                                        "name": "BROWNOUT_DET_LVL_SEL_7", 
                                        "range": null, 
                                        "title": "2.80V +/- 0.05", 
                                        "type": "bool"
                                    }
                                ], 
                                "depends_on": "BROWNOUT_DET", 
                                "help": "The brownout detector will reset the chip when the supply voltage is approximately\nbelow this level. Note that there may be some variation of brownout voltage level\nbetween each ESP32 chip.\n", 
                                "name": "BROWNOUT_DET_LVL_SEL", 
                                "title": "Brownout voltage level", 
                                "type": "choice"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "The ESP32 has a built-in brownout detector which can detect if the voltage is lower than\na specific value. If this happens, it will reset the chip in order to prevent unintended\nbehaviour.\n", 
                        "name": "BROWNOUT_DET", 
                        "range": null, 
                        "title": "Hardware brownout detect & reset", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "BROWNOUT_DET_LVL", 
                        "range": null, 
                        "title": null, 
                        "type": "int"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_TIME_SYSCALL>", 
                                "help": null, 
                                "name": "ESP32_TIME_SYSCALL_USE_RTC_FRC1", 
                                "range": null, 
                                "title": "RTC and high-resolution timer", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_TIME_SYSCALL>", 
                                "help": null, 
                                "name": "ESP32_TIME_SYSCALL_USE_RTC", 
                                "range": null, 
                                "title": "RTC", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_TIME_SYSCALL>", 
                                "help": null, 
                                "name": "ESP32_TIME_SYSCALL_USE_FRC1", 
                                "range": null, 
                                "title": "High-resolution timer", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_TIME_SYSCALL>", 
                                "help": null, 
                                "name": "ESP32_TIME_SYSCALL_USE_NONE", 
                                "range": null, 
                                "title": "None", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "This setting defines which hardware timers are used to\nimplement 'gettimeofday' and 'time' functions in C library.\n\n- If both high-resolution and RTC timers are used, timekeeping will\n  continue in deep sleep. Time will be reported at 1 microsecond\n  resolution. This is the default, and the recommended option.\n- If only high-resolution timer is used, gettimeofday will\n  provide time at microsecond resolution.\n  Time will not be preserved when going into deep sleep mode.\n- If only RTC timer is used, timekeeping will continue in\n  deep sleep, but time will be measured at 6.(6) microsecond\n  resolution. Also the gettimeofday function itself may take\n  longer to run.\n- If no timers are used, gettimeofday and time functions\n  return -1 and set errno to ENOSYS.\n- When RTC is used for timekeeping, two RTC_STORE registers are\n  used to keep time in deep sleep mode.\n", 
                        "name": "ESP32_TIME_SYSCALL", 
                        "title": "Timers used for gettimeofday function", 
                        "type": "choice"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_RTC_CLOCK_SOURCE>", 
                                "help": null, 
                                "name": "ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC", 
                                "range": null, 
                                "title": "Internal 150kHz RC oscillator", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_RTC_CLOCK_SOURCE>", 
                                "help": null, 
                                "name": "ESP32_RTC_CLOCK_SOURCE_EXTERNAL_CRYSTAL", 
                                "range": null, 
                                "title": "External 32kHz crystal", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Choose which clock is used as RTC clock source.\n", 
                        "name": "ESP32_RTC_CLOCK_SOURCE", 
                        "title": "RTC clock source", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "When the startup code initializes RTC_SLOW_CLK, it can perform\ncalibration by comparing the RTC_SLOW_CLK frequency with main XTAL\nfrequency. This option sets the number of RTC_SLOW_CLK cycles measured\nby the calibration routine. Higher numbers increase calibration\nprecision, which may be important for applications which spend a lot of\ntime in deep sleep. Lower numbers reduce startup time.\n\nWhen this option is set to 0, clock calibration will not be performed at\nstartup, and approximate clock frequencies will be assumed:\n\n- 150000 Hz if internal RC oscillator is used as clock source. For this use value 1024.\n- 32768 Hz if the 32k crystal oscillator is used. For this use value 3000 or more.\n  In case more value will help improve the definition of the launch of the crystal.\n  If the crystal could not start, it will be switched to internal RC.\n", 
                        "name": "ESP32_RTC_CLK_CAL_CYCLES", 
                        "range": [
                            0, 
                            125000
                        ], 
                        "title": "Number of cycles for RTC_SLOW_CLK calibration", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "ESP32_RTC_CLOCK_SOURCE_EXTERNAL_CRYSTAL", 
                        "help": "To reduce the startup time of an external RTC crystal,\nwe bootstrap it with a 32kHz square wave for a fixed number of cycles.\nSetting 0 will disable bootstrapping (if disabled, the crystal may take\nlonger to start up or fail to oscillate under some conditions).\n\nIf this value is too high, a faulty crystal may initially start and then fail.\nIf this value is too low, an otherwise good crystal may not start.\n\nTo accurately determine if the crystal has started,\nset a larger \"Number of cycles for RTC_SLOW_CLK calibration\" (about 3000).\n", 
                        "name": "ESP32_RTC_XTAL_BOOTSTRAP_CYCLES", 
                        "range": [
                            0, 
                            32768
                        ], 
                        "title": "Bootstrap cycles for external 32kHz crystal", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "When ESP32 exits deep sleep, the CPU and the flash chip are powered on\nat the same time. CPU will run deep sleep stub first, and then\nproceed to load code from flash. Some flash chips need sufficient\ntime to pass between power on and first read operation. By default,\nwithout any extra delay, this time is approximately 900us, although\nsome flash chip types need more than that.\n\nBy default extra delay is set to 2000us. When optimizing startup time\nfor applications which require it, this value may be reduced.\n\nIf you are seeing \"flash read err, 1000\" message printed to the\nconsole after deep sleep reset, try increasing this value.\n", 
                        "name": "ESP32_DEEP_SLEEP_WAKEUP_DELAY", 
                        "range": [
                            0, 
                            5000
                        ], 
                        "title": "Extra delay in deep sleep wake stub (in us)", 
                        "type": "int"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_XTAL_FREQ_SEL>", 
                                "help": null, 
                                "name": "ESP32_XTAL_FREQ_40", 
                                "range": null, 
                                "title": "40 MHz", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_XTAL_FREQ_SEL>", 
                                "help": null, 
                                "name": "ESP32_XTAL_FREQ_26", 
                                "range": null, 
                                "title": "26 MHz", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_XTAL_FREQ_SEL>", 
                                "help": null, 
                                "name": "ESP32_XTAL_FREQ_AUTO", 
                                "range": null, 
                                "title": "Autodetect", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "ESP32 currently supports the following XTAL frequencies:\n\n- 26 MHz\n- 40 MHz\n\nStartup code can automatically estimate XTAL frequency. This feature\nuses the internal 8MHz oscillator as a reference. Because the internal\noscillator frequency is temperature dependent, it is not recommended\nto use automatic XTAL frequency detection in applications which need\nto work at high ambient temperatures and use high-temperature\nqualified chips and modules.\n", 
                        "name": "ESP32_XTAL_FREQ_SEL", 
                        "title": "Main XTAL frequency", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "ESP32_XTAL_FREQ", 
                        "range": null, 
                        "title": null, 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "If set, the first time the app boots it will disable the BASIC ROM Console\npermanently (by burning an efuse).\n\nOtherwise, the BASIC ROM Console starts on reset if no valid bootloader is\nread from the flash.\n\n(Enabling secure boot also disables the BASIC ROM Console by default.)\n", 
                        "name": "DISABLE_BASIC_ROM_CONSOLE", 
                        "range": null, 
                        "title": "Permanently disable BASIC ROM Console", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "!BT_ENABLED", 
                        "help": "If enabled, this disables the linking of binary libraries in the application build. Note\nthat after enabling this Wi-Fi/Bluetooth will not work.\n", 
                        "name": "NO_BLOBS", 
                        "range": null, 
                        "title": "No Binary Blobs", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "If enabled, esp_timer_dump will dump information such as number of times\nthe timer was started, number of times the timer has triggered, and the\ntotal time it took for the callback to run.\nThis option has some effect on timer performance and the amount of memory\nused for timer storage, and should only be used for debugging/testing\npurposes.\n", 
                        "name": "ESP_TIMER_PROFILING", 
                        "range": null, 
                        "title": "Enable esp_timer profiling features", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Bootloaders before IDF v2.1 did less initialisation of the\nsystem clock. This setting needs to be enabled to build an app\nwhich can be booted by these older bootloaders.\n\nIf this setting is enabled, the app can be booted by any bootloader\nfrom IDF v1.0 up to the current version.\n\nIf this setting is disabled, the app can only be booted by bootloaders\nfrom IDF v2.1 or newer.\n\nEnabling this setting adds approximately 1KB to the app's IRAM usage.\n", 
                        "name": "COMPATIBLE_PRE_V2_1_BOOTLOADERS", 
                        "range": null, 
                        "title": "App compatible with bootloaders before IDF v2.1", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Functions esp_err_to_name() and esp_err_to_name_r() return string\nrepresentations of error codes from a pre-generated lookup table.\nThis option can be used to turn off the use of the look-up table in\norder to save memory but this comes at the price of sacrificing\ndistinguishable (meaningful) output string representations.\n", 
                        "name": "ESP_ERR_TO_NAME_LOOKUP", 
                        "range": null, 
                        "title": "Enable lookup of error code strings", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "title": "ESP32-specific", 
                "type": "menu"
            }, 
            {
                "children": [
                    {
                        "children": [
                            {
                                "children": [
                                    {
                                        "children": [], 
                                        "depends_on": "<choice SW_COEXIST_PREFERENCE>", 
                                        "help": null, 
                                        "name": "SW_COEXIST_PREFERENCE_WIFI", 
                                        "range": null, 
                                        "title": "WiFi", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice SW_COEXIST_PREFERENCE>", 
                                        "help": null, 
                                        "name": "SW_COEXIST_PREFERENCE_BT", 
                                        "range": null, 
                                        "title": "Bluetooth(include BR/EDR and BLE)", 
                                        "type": "bool"
                                    }, 
                                    {
                                        "children": [], 
                                        "depends_on": "<choice SW_COEXIST_PREFERENCE>", 
                                        "help": null, 
                                        "name": "SW_COEXIST_PREFERENCE_BALANCE", 
                                        "range": null, 
                                        "title": "Balance", 
                                        "type": "bool"
                                    }
                                ], 
                                "depends_on": "SW_COEXIST_ENABLE", 
                                "help": "Choose Bluetooth/WiFi/Balance for different preference.\nIf choose WiFi, it will make WiFi performance better. Such, keep WiFi Audio more fluent.\nIf choose Bluetooth, it will make Bluetooth performance better. Such, keep Bluetooth(A2DP) Audio more fluent.\nIf choose Balance, the performance of WiFi and bluetooth will be balance. It's default. Normally, just choose balance, the A2DP audio can play fluently, too.\nExcept config preference in menuconfig, you can also call esp_coex_preference_set() dynamically.\n", 
                                "name": "SW_COEXIST_PREFERENCE", 
                                "title": "WiFi/Bluetooth coexistence performance preference", 
                                "type": "choice"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "SW_COEXIST_ENABLE", 
                                "help": null, 
                                "name": "SW_COEXIST_PREFERENCE_VALUE", 
                                "range": null, 
                                "title": null, 
                                "type": "int"
                            }
                        ], 
                        "depends_on": "BT_ENABLED", 
                        "help": "If enabled, WiFi & Bluetooth coexistence is controlled by software rather than hardware.\nRecommended for heavy traffic scenarios. Both coexistence configuration options are\nautomatically managed, no user intervention is required.\n", 
                        "name": "SW_COEXIST_ENABLE", 
                        "range": null, 
                        "title": "Software controls WiFi/Bluetooth coexistence", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Set the number of WiFi static RX buffers. Each buffer takes approximately 1.6KB of RAM.\nThe static rx buffers are allocated when esp_wifi_init is called, they are not freed\nuntil esp_wifi_deinit is called.\n\nWiFi hardware use these buffers to receive all 802.11 frames.\nA higher number may allow higher throughput but increases memory use.\n", 
                        "name": "ESP32_WIFI_STATIC_RX_BUFFER_NUM", 
                        "range": [
                            2, 
                            25
                        ], 
                        "title": "Max number of WiFi static RX buffers", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Set the number of WiFi dynamic RX buffers, 0 means unlimited RX buffers will be allocated\n(provided sufficient free RAM). The size of each dynamic RX buffer depends on the size of\nthe received data frame.\n\nFor each received data frame, the WiFi driver makes a copy to an RX buffer and then delivers\nit to the high layer TCP/IP stack. The dynamic RX buffer is freed after the higher layer has\nsuccessfully received the data frame.\n\nFor some applications, WiFi data frames may be received faster than the application can\nprocess them. In these cases we may run out of memory if RX buffer number is unlimited (0).\n\nIf a dynamic RX buffer limit is set, it should be at least the number of static RX buffers.\n", 
                        "name": "ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM", 
                        "range": [
                            0, 
                            128
                        ], 
                        "title": "Max number of WiFi dynamic RX buffers", 
                        "type": "int"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_WIFI_TX_BUFFER>", 
                                "help": null, 
                                "name": "ESP32_WIFI_STATIC_TX_BUFFER", 
                                "range": null, 
                                "title": "Static", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "!SPIRAM_USE_MALLOC && <choice ESP32_WIFI_TX_BUFFER>", 
                                "help": null, 
                                "name": "ESP32_WIFI_DYNAMIC_TX_BUFFER", 
                                "range": null, 
                                "title": "Dynamic", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Select type of WiFi TX buffers:\n\nIf \"Static\" is selected, WiFi TX buffers are allocated when WiFi is initialized and released\nwhen WiFi is de-initialized. The size of each static TX buffer is fixed to about 1.6KB.\n\nIf \"Dynamic\" is selected, each WiFi TX buffer is allocated as needed when a data frame is\ndelivered to the Wifi driver from the TCP/IP stack. The buffer is freed after the data frame\nhas been sent by the WiFi driver. The size of each dynamic TX buffer depends on the length\nof each data frame sent by the TCP/IP layer.\n\nIf PSRAM is enabled, \"Static\" should be selected to guarantee enough WiFi TX buffers.\nIf PSRAM is disabled, \"Dynamic\" should be selected to improve the utilization of RAM.\n", 
                        "name": "ESP32_WIFI_TX_BUFFER", 
                        "title": "Type of WiFi TX buffers", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "ESP32_WIFI_TX_BUFFER_TYPE", 
                        "range": null, 
                        "title": null, 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "ESP32_WIFI_STATIC_TX_BUFFER", 
                        "help": "Set the number of WiFi static TX buffers. Each buffer takes approximately 1.6KB of RAM.\nThe static RX buffers are allocated when esp_wifi_init() is called, they are not released\nuntil esp_wifi_deinit() is called.\n\nFor each transmitted data frame from the higher layer TCP/IP stack, the WiFi driver makes a\ncopy of it in a TX buffer.  For some applications especially UDP applications, the upper\nlayer can deliver frames faster than WiFi layer can transmit. In these cases, we may run out\nof TX buffers.\n", 
                        "name": "ESP32_WIFI_STATIC_TX_BUFFER_NUM", 
                        "range": [
                            6, 
                            64
                        ], 
                        "title": "Max number of WiFi static TX buffers", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": "ESP32_WIFI_DYNAMIC_TX_BUFFER", 
                        "help": "Set the number of WiFi dynamic TX buffers. The size of each dynamic TX buffer is not fixed,\nit depends on the size of each transmitted data frame.\n\nFor each transmitted frame from the higher layer TCP/IP stack, the WiFi driver makes a copy\nof it in a TX buffer. For some applications, especially UDP applications, the upper layer\ncan deliver frames faster than WiFi layer can transmit. In these cases, we may run out of TX\nbuffers.\n", 
                        "name": "ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM", 
                        "range": [
                            16, 
                            128
                        ], 
                        "title": "Max number of WiFi dynamic TX buffers", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Select this option to enable CSI(Channel State Information) feature. CSI takes about\nCONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM KB of RAM. If CSI is not used, it is better to disable\nthis feature in order to save memory.\n", 
                        "name": "ESP32_WIFI_CSI_ENABLED", 
                        "range": null, 
                        "title": "WiFi CSI(Channel State Information)", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "ESP32_WIFI_AMPDU_TX_ENABLED", 
                                "help": "Set the size of WiFi Block Ack TX window. Generally a bigger value means higher throughput but\nmore memory. Most of time we should NOT change the default value unless special reason, e.g.\ntest the maximum UDP TX throughput with iperf etc. For iperf test in shieldbox, the recommended\nvalue is 9~12.\n", 
                                "name": "ESP32_WIFI_TX_BA_WIN", 
                                "range": [
                                    2, 
                                    32
                                ], 
                                "title": "WiFi AMPDU TX BA window size", 
                                "type": "int"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Select this option to enable AMPDU TX feature\n", 
                        "name": "ESP32_WIFI_AMPDU_TX_ENABLED", 
                        "range": null, 
                        "title": "WiFi AMPDU TX", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "ESP32_WIFI_AMPDU_RX_ENABLED", 
                                "help": "Set the size of WiFi Block Ack RX window. Generally a bigger value means higher throughput but\nmore memory. Most of time we should NOT change the default value unless special reason, e.g.\ntest the maximum UDP RX throughput with iperf etc. For iperf test in shieldbox, the recommended\nvalue is 9~12.\n", 
                                "name": "ESP32_WIFI_RX_BA_WIN", 
                                "range": [
                                    2, 
                                    32
                                ], 
                                "title": "WiFi AMPDU RX BA window size", 
                                "type": "int"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Select this option to enable AMPDU RX feature\n", 
                        "name": "ESP32_WIFI_AMPDU_RX_ENABLED", 
                        "range": null, 
                        "title": "WiFi AMPDU RX", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Select this option to enable WiFi NVS flash\n", 
                        "name": "ESP32_WIFI_NVS_ENABLED", 
                        "range": null, 
                        "title": "WiFi NVS flash", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_WIFI_TASK_CORE_ID>", 
                                "help": null, 
                                "name": "ESP32_WIFI_TASK_PINNED_TO_CORE_0", 
                                "range": null, 
                                "title": "Core 0", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice ESP32_WIFI_TASK_CORE_ID>", 
                                "help": null, 
                                "name": "ESP32_WIFI_TASK_PINNED_TO_CORE_1", 
                                "range": null, 
                                "title": "Core 1", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": "!FREERTOS_UNICORE", 
                        "help": "Pinned WiFi task to core 0 or core 1.\n", 
                        "name": "ESP32_WIFI_TASK_CORE_ID", 
                        "title": "WiFi Task Core ID", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "ESP-MESH utilizes beacon frames to detect and resolve root node conflicts (see documentation). However the default\nlength of a beacon frame can simultaneously hold only five root node identifier structures, meaning that a root node\nconflict of up to five nodes can be detected at one time. In the occurence of more root nodes conflict involving more\nthan five root nodes, the conflict resolution process will detect five of the root nodes, resolve the conflict, and\u3000\nre-detect more root nodes. This process will repeat until all root node conflicts are resolved. However this process\ncan generally take a very long time.\n\nTo counter this situation, the beacon frame length can be increased such that more root nodes can be detected simultaneously.\nEach additional root node will require 36 bytes and should be added ontop of the default beacon frame length of\n752 bytes. For example, if you want to detect 10 root nodes simultaneously, you need to set the beacon frame length as\u3000\n932 (752+36*5).\n\nSetting a longer beacon length also assists with debugging as the conflicting root nodes can be identified more quickly.\n", 
                        "name": "ESP32_WIFI_SOFTAP_BEACON_MAX_LEN", 
                        "range": [
                            752, 
                            1256
                        ], 
                        "title": "Max length of WiFi SoftAP Beacon", 
                        "type": "int"
                    }
                ], 
                "depends_on": null, 
                "title": "Wi-Fi", 
                "type": "menu"
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "If this option is enabled, NVS will be initialized and calibration data will be loaded from there.\nPHY calibration will be skipped on deep sleep wakeup. If calibration data is not found, full calibration\nwill be performed and stored in NVS. Normally, only partial calibration will be performed.\nIf this option is disabled, full calibration will be performed.\n\nIf it's easy that your board calibrate bad data, choose 'n'.\nTwo cases for example, you should choose 'n':\n1.If your board is easy to be booted up with antenna disconnected.\n2.Because of your board design, each time when you do calibration, the result are too unstable.\nIf unsure, choose 'y'.\n", 
                        "name": "ESP32_PHY_CALIBRATION_AND_DATA_STORAGE", 
                        "range": null, 
                        "title": "Store phy calibration data in NVS", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "If enabled, PHY init data will be loaded from a partition.\nWhen using a custom partition table, make sure that PHY data\npartition is included (type: 'data', subtype: 'phy').\nWith default partition tables, this is done automatically.\nIf PHY init data is stored in a partition, it has to be flashed there,\notherwise runtime error will occur.\n\nIf this option is not enabled, PHY init data will be embedded\ninto the application binary.\n\nIf unsure, choose 'n'.\n", 
                        "name": "ESP32_PHY_INIT_DATA_IN_PARTITION", 
                        "range": null, 
                        "title": "Use a partition to store PHY init data", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Set maximum transmit power for WiFi radio. Actual transmit power for high\ndata rates may be lower than this setting.\n", 
                        "name": "ESP32_PHY_MAX_WIFI_TX_POWER", 
                        "range": [
                            0, 
                            20
                        ], 
                        "title": "Max WiFi TX power (dBm)", 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "ESP32_PHY_MAX_TX_POWER", 
                        "range": null, 
                        "title": null, 
                        "type": "int"
                    }
                ], 
                "depends_on": null, 
                "title": "PHY", 
                "type": "menu"
            }, 
            {
                "children": [
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "PM_ENABLE", 
                                "help": "If enabled, startup code configures dynamic frequency scaling.\nMax CPU frequency is set to CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ setting,\nmin frequency is set to XTAL frequency.\nIf disabled, DFS will not be active until the application\nconfigures it using esp_pm_configure function.\n", 
                                "name": "PM_DFS_INIT_AUTO", 
                                "range": null, 
                                "title": "Enable dynamic frequency scaling (DFS) at startup", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "PM_ENABLE && (ESP32_TIME_SYSCALL_USE_RTC || ESP32_TIME_SYSCALL_USE_RTC_FRC1)", 
                                "help": "When APB clock frequency changes, high-resolution timer (esp_timer)\nscale and base value need to be adjusted. Each adjustment may cause\nsmall error, and over time such small errors may cause time drift.\nIf this option is enabled, RTC timer will be used as a reference to\ncompensate for the drift.\nIt is recommended that this option is only used if 32k XTAL is selected\nas RTC clock source.\n", 
                                "name": "PM_USE_RTC_TIMER_REF", 
                                "range": null, 
                                "title": "Use RTC timer to prevent time drift (EXPERIMENTAL)", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "PM_ENABLE", 
                                "help": "If enabled, esp_pm_* functions will keep track of the amount of time\neach of the power management locks has been held, and esp_pm_dump_locks\nfunction will print this information.\nThis feature can be used to analyze which locks are preventing the chip\nfrom going into a lower power state, and see what time the chip spends\nin each power saving mode. This feature does incur some run-time\noverhead, so should typically be disabled in production builds.\n", 
                                "name": "PM_PROFILING", 
                                "range": null, 
                                "title": "Enable profiling counters for PM locks", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "PM_ENABLE", 
                                "help": "If enabled, some GPIOs will be used to signal events such as RTOS ticks,\nfrequency switching, entry/exit from idle state. Refer to pm_trace.c\nfile for the list of GPIOs.\nThis feature is intended to be used when analyzing/debugging behavior\nof power management implementation, and should be kept disabled in\napplications.\n", 
                                "name": "PM_TRACE", 
                                "range": null, 
                                "title": "Enable debug tracing of PM using GPIOs", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "If enabled, application is compiled with support for power management.\nThis option has run-time overhead (increased interrupt latency,\nlonger time to enter idle state), and it also reduces accuracy of\nRTOS ticks and timers used for timekeeping.\nEnable this option if application uses power management APIs.\n", 
                        "name": "PM_ENABLE", 
                        "range": null, 
                        "title": "Support for power management", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "title": "Power Management", 
                "type": "menu"
            }, 
            {
                "children": [
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "SPI_FLASH_VERIFY_WRITE", 
                                "help": "If this option is enabled, if SPI flash write verification fails then a log error line\nwill be written with the address, expected & actual values. This can be useful when\ndebugging hardware SPI flash problems.\n", 
                                "name": "SPI_FLASH_LOG_FAILED_WRITE", 
                                "range": null, 
                                "title": "Log errors if verification fails", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "SPI_FLASH_VERIFY_WRITE", 
                                "help": "If this option is enabled, any SPI flash write which tries to set zero bits in the flash to\nones will log a warning. Such writes will not result in the requested data appearing identically\nin flash once written, as SPI NOR flash can only set bits to one when an entire sector is erased.\nAfter erasing, individual bits can only be written from one to zero.\n\nNote that some software (such as SPIFFS) which is aware of SPI NOR flash may write one bits as an\noptimisation, relying on the data in flash becoming a bitwise AND of the new data and any existing data.\nSuch software will log spurious warnings if this option is enabled.\n", 
                                "name": "SPI_FLASH_WARN_SETTING_ZERO_TO_ONE", 
                                "range": null, 
                                "title": "Log warning if writing zero bits to ones", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "If this option is enabled, any time SPI flash is written then the data will be read\nback and verified. This can catch hardware problems with SPI flash, or flash which\nwas not erased before verification.\n", 
                        "name": "SPI_FLASH_VERIFY_WRITE", 
                        "range": null, 
                        "title": "Verify SPI flash writes", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "This option enables the following APIs:\n\n- spi_flash_reset_counters\n- spi_flash_dump_counters\n- spi_flash_get_counters\n\nThese APIs may be used to collect performance data for spi_flash APIs\nand to help understand behaviour of libraries which use SPI flash.\n", 
                        "name": "SPI_FLASH_ENABLE_COUNTERS", 
                        "range": null, 
                        "title": "Enable operation counters", 
                        "type": "bool"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Enable this flag to use patched versions of SPI flash ROM driver functions.\nThis option is needed to write to flash on ESP32-D2WD, and any configuration\nwhere external SPI flash is connected to non-default pins.\n", 
                        "name": "SPI_FLASH_ROM_DRIVER_PATCH", 
                        "range": null, 
                        "title": "Enable SPI flash ROM driver patched functions", 
                        "type": "bool"
                    }, 
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice SPI_FLASH_WRITING_DANGEROUS_REGIONS>", 
                                "help": null, 
                                "name": "SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS", 
                                "range": null, 
                                "title": "Aborts", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice SPI_FLASH_WRITING_DANGEROUS_REGIONS>", 
                                "help": null, 
                                "name": "SPI_FLASH_WRITING_DANGEROUS_REGIONS_FAILS", 
                                "range": null, 
                                "title": "Fails", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice SPI_FLASH_WRITING_DANGEROUS_REGIONS>", 
                                "help": null, 
                                "name": "SPI_FLASH_WRITING_DANGEROUS_REGIONS_ALLOWED", 
                                "range": null, 
                                "title": "Allowed", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "SPI flash APIs can optionally abort or return a failure code\nif erasing or writing addresses that fall at the beginning\nof flash (covering the bootloader and partition table) or that\noverlap the app partition that contains the running app.\n\nIt is not recommended to ever write to these regions from an IDF app,\nand this check prevents logic errors or corrupted firmware memory from\ndamaging these regions.\n\nNote that this feature *does not* check calls to the esp_rom_xxx SPI flash\nROM functions. These functions should not be called directly from IDF\napplications.\n", 
                        "name": "SPI_FLASH_WRITING_DANGEROUS_REGIONS", 
                        "title": "Writing to dangerous flash regions", 
                        "type": "choice"
                    }
                ], 
                "depends_on": null, 
                "title": "SPI Flash driver", 
                "type": "menu"
            }, 
            {
                "children": [
                    {
                        "children": [
                            {
                                "children": [], 
                                "depends_on": "<choice LOG_DEFAULT_LEVEL>", 
                                "help": null, 
                                "name": "LOG_DEFAULT_LEVEL_NONE", 
                                "range": null, 
                                "title": "No output", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice LOG_DEFAULT_LEVEL>", 
                                "help": null, 
                                "name": "LOG_DEFAULT_LEVEL_ERROR", 
                                "range": null, 
                                "title": "Error", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice LOG_DEFAULT_LEVEL>", 
                                "help": null, 
                                "name": "LOG_DEFAULT_LEVEL_WARN", 
                                "range": null, 
                                "title": "Warning", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice LOG_DEFAULT_LEVEL>", 
                                "help": null, 
                                "name": "LOG_DEFAULT_LEVEL_INFO", 
                                "range": null, 
                                "title": "Info", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice LOG_DEFAULT_LEVEL>", 
                                "help": null, 
                                "name": "LOG_DEFAULT_LEVEL_DEBUG", 
                                "range": null, 
                                "title": "Debug", 
                                "type": "bool"
                            }, 
                            {
                                "children": [], 
                                "depends_on": "<choice LOG_DEFAULT_LEVEL>", 
                                "help": null, 
                                "name": "LOG_DEFAULT_LEVEL_VERBOSE", 
                                "range": null, 
                                "title": "Verbose", 
                                "type": "bool"
                            }
                        ], 
                        "depends_on": null, 
                        "help": "Specify how much output to see in logs by default.\nYou can set lower verbosity level at runtime using\nesp_log_level_set function.\n\nNote that this setting limits which log statements\nare compiled into the program. So setting this to, say,\n\"Warning\" would mean that changing log level to \"Debug\"\nat runtime will not be possible.\n", 
                        "name": "LOG_DEFAULT_LEVEL", 
                        "title": "Default log verbosity", 
                        "type": "choice"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": null, 
                        "name": "LOG_DEFAULT_LEVEL", 
                        "range": null, 
                        "title": null, 
                        "type": "int"
                    }, 
                    {
                        "children": [], 
                        "depends_on": null, 
                        "help": "Enable ANSI terminal color codes in bootloader output.\n\nIn order to view these, your terminal program must support ANSI color codes.\n", 
                        "name": "LOG_COLORS", 
                        "range": null, 
                        "title": "Use ANSI terminal colors in log output", 
                        "type": "bool"
                    }
                ], 
                "depends_on": null, 
                "title": "Log output", 
                "type": "menu"
            }
        ], 
        "depends_on": null, 
        "title": "Component config", 
        "type": "menu"
    }
]